---
import { tracks, talks } from '../data/tracks';

const trackColors = [
  { bg: 'bg-devfest-blue/10', border: 'border-devfest-blue', text: 'text-devfest-blue' },
  { bg: 'bg-devfest-red/10', border: 'border-devfest-red', text: 'text-devfest-red' },
  { bg: 'bg-devfest-green/10', border: 'border-devfest-green', text: 'text-devfest-green' },
  { bg: 'bg-devfest-yellow/10', border: 'border-devfest-yellow', text: 'text-devfest-yellow' },
];
---

<section id="tracks" class="py-20 bg-google-grey-50">
  <div class="container mx-auto px-6">
    <div class="text-center mb-12">
      <h2 class="text-4xl md:text-5xl font-bold mb-4 font-google-sans-display">
        <span class="text-devfest-green">Tracks &</span>
        <span class="text-devfest-yellow"> Talks</span>
      </h2>
      <p class="text-google-grey-700 text-lg max-w-2xl mx-auto">
        Scopri i talk e i workshop organizzati per track tematiche. Un'intera giornata dedicata alla tecnologia!
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {tracks.map((track, index) => {
        const colors = trackColors[index % trackColors.length];
        return (
          <div class={`track-item bg-white border-2 ${colors.border} rounded-google-xl p-8 hover:shadow-material-3 transition-all shadow-material-1`}>
            <button class="track-header md:cursor-default w-full text-left mb-4 flex items-center justify-between md:pointer-events-none" aria-label="Toggle track details">
              <h3 class={`text-2xl font-bold ${colors.text}`}>
                {track.name}
              </h3>
              <svg class="chevron w-6 h-6 md:hidden transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            <div class="track-content">
              <p class="text-google-grey-700 mb-6 leading-relaxed">
                {track.description}
              </p>
              
              <div class="space-y-3">
              {track.talkIds.map(talkId => {
                const talk = talks[talkId];
                return (
                  <div class="bg-google-grey-50 rounded-google-lg p-4 shadow-material-1 border border-google-grey-200 relative talk-card hover:shadow-material-2 transition-all">
                    <div class="flex items-start justify-between mb-2">
                      <h4 class="font-semibold text-google-grey-900 flex-1">
                        {talk.title}
                      </h4>
                      <span class={`${colors.text} font-mono text-sm font-bold ml-2 bg-white px-2 py-1 rounded`}>
                        {talk.time}
                      </span>
                    </div>
                    <p class="text-google-grey-600 text-sm flex items-center gap-1">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"/>
                      </svg>
                      {talk.speaker}
                    </p>
                    
                    {/* Tooltip */}
                    <div class="talk-tooltip absolute z-10 bg-google-grey-900 text-white text-sm rounded-google-lg p-4 shadow-material-4 max-w-md w-max hidden opacity-0 transition-opacity duration-200 pointer-events-none">
                      <div class="relative">
                        <p class="leading-relaxed">{talk.description}</p>
                        <div class="absolute -top-2 left-4 w-4 h-4 bg-google-grey-900 transform rotate-45"></div>
                      </div>
                    </div>
                  </div>
                );
              })}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  </div>
</section>

<script is:inline>
  (function() {
    function setupTrackCollapse() {
      const trackItems = document.querySelectorAll('.track-item');
      
      trackItems.forEach(function(track) {
        const header = track.querySelector('.track-header');
        const content = track.querySelector('.track-content');
        
        if (!header || !content) return;
        
        // Check if already initialized
        if (header.dataset.initialized === 'true') return;
        header.dataset.initialized = 'true';
        
        // Start collapsed on mobile
        if (window.innerWidth < 768) {
          track.classList.add('collapsed');
        }
        
        header.addEventListener('click', function(e) {
          // Only work on mobile
          if (window.innerWidth >= 768) return;
          
          e.preventDefault();
          track.classList.toggle('collapsed');
        });
      });
    }
    
    // Run on load
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setupTrackCollapse);
    } else {
      setupTrackCollapse();
    }
    
    // Re-run on Astro page transitions
    document.addEventListener('astro:page-load', setupTrackCollapse);
  })();
</script>

<style>
  /* Mobile collapse functionality */
  @media (max-width: 767px) {
    .track-item.collapsed .track-content {
      max-height: 0;
      overflow: hidden;
      opacity: 0;
      margin-bottom: 0;
      transition: max-height 0.3s ease-out, opacity 0.3s ease-out, margin-bottom 0.3s ease-out;
    }
    
    .track-item:not(.collapsed) .track-content {
      max-height: 5000px;
      opacity: 1;
      transition: max-height 0.3s ease-in, opacity 0.3s ease-in;
    }
    
    .track-item.collapsed .chevron {
      transform: rotate(-90deg);
    }
    
    .track-header {
      cursor: pointer;
      -webkit-tap-highlight-color: transparent;
    }
  }

  /* Desktop-only hover behavior */
  @media (hover: hover) and (pointer: fine) {
    .talk-card:hover .talk-tooltip {
      display: block;
      opacity: 1;
    }
  }

  /* Position tooltip below the card */
  .talk-tooltip {
    bottom: auto;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-top: 0.5rem;
    z-index: 50;
  }
</style>
